// Automatically generated by MockGen. DO NOT EDIT!
// Source: kits/cli/proto/hello.pb.go

package mock_hello

import (
	gomock "github.com/golang/mock/gomock"
	pb "github.com/yulefox/lamp/kits/cli/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Mock of GreeterClient interface
type MockGreeterClient struct {
	ctrl     *gomock.Controller
	recorder *_MockGreeterClientRecorder
}

// Recorder for MockGreeterClient (not exported)
type _MockGreeterClientRecorder struct {
	mock *MockGreeterClient
}

func NewMockGreeterClient(ctrl *gomock.Controller) *MockGreeterClient {
	mock := &MockGreeterClient{ctrl: ctrl}
	mock.recorder = &_MockGreeterClientRecorder{mock}
	return mock
}

func (_m *MockGreeterClient) EXPECT() *_MockGreeterClientRecorder {
	return _m.recorder
}

func (_m *MockGreeterClient) SayHello(ctx context.Context, in *pb.Hello_Req, opts ...grpc.CallOption) (*pb.Hello_Res, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SayHello", _s...)
	ret0, _ := ret[0].(*pb.Hello_Res)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockGreeterClientRecorder) SayHello(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SayHello", _s...)
}

// Mock of GreeterServer interface
type MockGreeterServer struct {
	ctrl     *gomock.Controller
	recorder *_MockGreeterServerRecorder
}

// Recorder for MockGreeterServer (not exported)
type _MockGreeterServerRecorder struct {
	mock *MockGreeterServer
}

func NewMockGreeterServer(ctrl *gomock.Controller) *MockGreeterServer {
	mock := &MockGreeterServer{ctrl: ctrl}
	mock.recorder = &_MockGreeterServerRecorder{mock}
	return mock
}

func (_m *MockGreeterServer) EXPECT() *_MockGreeterServerRecorder {
	return _m.recorder
}

func (_m *MockGreeterServer) SayHello(_param0 context.Context, _param1 *pb.Hello_Req) (*pb.Hello_Res, error) {
	ret := _m.ctrl.Call(_m, "SayHello", _param0, _param1)
	ret0, _ := ret[0].(*pb.Hello_Res)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockGreeterServerRecorder) SayHello(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SayHello", arg0, arg1)
}
