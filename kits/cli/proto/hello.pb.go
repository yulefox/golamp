// Code generated by protoc-gen-go.
// source: hello.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	hello.proto

It has these top-level messages:
	Event
	Hello
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	Type int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto1.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type Hello struct {
}

func (m *Hello) Reset()                    { *m = Hello{} }
func (m *Hello) String() string            { return proto1.CompactTextString(m) }
func (*Hello) ProtoMessage()               {}
func (*Hello) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Hello_Req struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Hello_Req) Reset()                    { *m = Hello_Req{} }
func (m *Hello_Req) String() string            { return proto1.CompactTextString(m) }
func (*Hello_Req) ProtoMessage()               {}
func (*Hello_Req) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Hello_Req) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Hello_Res struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Hello_Res) Reset()                    { *m = Hello_Res{} }
func (m *Hello_Res) String() string            { return proto1.CompactTextString(m) }
func (*Hello_Res) ProtoMessage()               {}
func (*Hello_Res) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

func (m *Hello_Res) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto1.RegisterType((*Event)(nil), "proto.Event")
	proto1.RegisterType((*Hello)(nil), "proto.Hello")
	proto1.RegisterType((*Hello_Req)(nil), "proto.Hello.Req")
	proto1.RegisterType((*Hello_Res)(nil), "proto.Hello.Res")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Greeter service

type GreeterClient interface {
	SayHello(ctx context.Context, in *Hello_Req, opts ...grpc.CallOption) (*Hello_Res, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *Hello_Req, opts ...grpc.CallOption) (*Hello_Res, error) {
	out := new(Hello_Res)
	err := grpc.Invoke(ctx, "/proto.Greeter/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter service

type GreeterServer interface {
	SayHello(context.Context, *Hello_Req) (*Hello_Res, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hello_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*Hello_Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}

// Client API for GameService service

type GameServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (GameService_StreamClient, error)
}

type gameServiceClient struct {
	cc *grpc.ClientConn
}

func NewGameServiceClient(cc *grpc.ClientConn) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (GameService_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GameService_serviceDesc.Streams[0], c.cc, "/proto.GameService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServiceStreamClient{stream}
	return x, nil
}

type GameService_StreamClient interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type gameServiceStreamClient struct {
	grpc.ClientStream
}

func (x *gameServiceStreamClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameServiceStreamClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GameService service

type GameServiceServer interface {
	Stream(GameService_StreamServer) error
}

func RegisterGameServiceServer(s *grpc.Server, srv GameServiceServer) {
	s.RegisterService(&_GameService_serviceDesc, srv)
}

func _GameService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServiceServer).Stream(&gameServiceStreamServer{stream})
}

type GameService_StreamServer interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type gameServiceStreamServer struct {
	grpc.ServerStream
}

func (x *gameServiceStreamServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameServiceStreamServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _GameService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hello.proto",
}

func init() { proto1.RegisterFile("hello.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x48, 0xcd, 0xc9,
	0xc9, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xd2, 0x5c, 0xac, 0xae,
	0x65, 0xa9, 0x79, 0x25, 0x42, 0x42, 0x5c, 0x2c, 0x25, 0x95, 0x05, 0xa9, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0xac, 0x41, 0x60, 0xb6, 0x92, 0x33, 0x17, 0xab, 0x07, 0x48, 0x8b, 0x94, 0x24, 0x17, 0x73,
	0x50, 0x6a, 0x21, 0x48, 0x4d, 0x5e, 0x62, 0x2e, 0x44, 0x0d, 0x67, 0x10, 0x98, 0x2d, 0x25, 0x0f,
	0x92, 0x2a, 0x16, 0x92, 0xe0, 0x62, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x87, 0xc9, 0xc2, 0xb8,
	0x46, 0xd6, 0x5c, 0xec, 0xee, 0x45, 0xa9, 0xa9, 0x25, 0xa9, 0x45, 0x42, 0x06, 0x5c, 0x1c, 0xc1,
	0x89, 0x95, 0x60, 0x23, 0x85, 0x04, 0x20, 0xee, 0xd0, 0x03, 0xf3, 0xf4, 0x82, 0x52, 0x0b, 0xa5,
	0xd0, 0x45, 0x8a, 0x95, 0x18, 0x8c, 0xcc, 0xb9, 0xb8, 0xdd, 0x13, 0x73, 0x53, 0x83, 0x53, 0x8b,
	0xca, 0x32, 0x93, 0x53, 0x85, 0x34, 0xb8, 0xd8, 0x82, 0x4b, 0x8a, 0x52, 0x13, 0x73, 0x85, 0x78,
	0xa0, 0x8a, 0xc1, 0x8e, 0x97, 0x42, 0xe1, 0x69, 0x30, 0x1a, 0x30, 0x26, 0xb1, 0x81, 0x05, 0x8c,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x86, 0xbc, 0x38, 0x4e, 0xf4, 0x00, 0x00, 0x00,
}
